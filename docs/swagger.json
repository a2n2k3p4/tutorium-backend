{
    "swagger": "2.0",
    "info": {
        "description": "This is the API for Tutorium Backend system.",
        "title": "Tutorium Backend API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "AGPL-3.0",
            "url": "https://www.gnu.org/licenses/agpl-3.0.en."
        },
        "version": "1.0"
    },
    "paths": {
        "/admins": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of all admins",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "Get all admins",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdminDoc"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new admin with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "Create a new admin",
                "parameters": [
                    {
                        "description": "Admin data",
                        "name": "admin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AdminDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.AdminDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admins/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a specific admin by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "Get admin by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Admin ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AdminDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid admin ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "admin not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a specific admin by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "Delete admin by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Admin ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted admin",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid admin ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "admin not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/banlearners": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetBanLearners returns a list of all ban records",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BanLearners"
                ],
                "summary": "Get all banned learners",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BanDetailsLearnerDoc"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "CreateBanLearner creates a new ban record for a learner",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BanLearners"
                ],
                "summary": "Create a new banned learner record",
                "parameters": [
                    {
                        "description": "Ban Learner Payload",
                        "name": "banlearner",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BanDetailsLearnerDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.BanDetailsLearnerDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/banlearners/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetBanLearner returns a single ban record by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BanLearners"
                ],
                "summary": "Get a banned learner by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ban Learner ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BanDetailsLearnerDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "banlearner not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "UpdateBanLearner modifies an existing ban record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BanLearners"
                ],
                "summary": "Update a banned learner record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ban Learner ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated ban record",
                        "name": "banlearner",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BanDetailsLearnerDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BanDetailsLearnerDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "banlearner not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "DeleteBanLearner deletes a ban record by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BanLearners"
                ],
                "summary": "Delete a banned learner record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ban Learner ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted ban learner",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "banlearner not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/banteachers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetBanTeachers retrieves all BanDetailsTeacher entries with associated Teacher",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BanTeachers"
                ],
                "summary": "List all ban records for teachers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BanDetailsTeacherDoc"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "CreateBanTeacher creates a new BanDetailsTeacher entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BanTeachers"
                ],
                "summary": "Create a new ban record for a teacher",
                "parameters": [
                    {
                        "description": "BanTeacher payload",
                        "name": "banteacher",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BanDetailsTeacherDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.BanDetailsTeacherDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/banteachers/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetBanTeacher retrieves a single BanDetailsTeacher by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BanTeachers"
                ],
                "summary": "Get ban record by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "BanTeacher ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BanDetailsTeacherDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "BanTeacher not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "UpdateBanTeacher updates an existing BanDetailsTeacher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BanTeachers"
                ],
                "summary": "Update a ban record by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "BanTeacher ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated payload",
                        "name": "banteacher",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BanDetailsTeacherDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BanDetailsTeacherDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "BanTeacher not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "DeleteBanTeacher removes a BanDetailsTeacher record by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BanTeachers"
                ],
                "summary": "Delete a ban record by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "BanTeacher ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted ban teacher",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "BanTeacher not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/class_categories": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetClassCategories retrieves all ClassCategory records with Classes relation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ClassCategories"
                ],
                "summary": "List all class categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ClassCategoryDoc"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "CreateClassCategory creates a new ClassCategory record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ClassCategories"
                ],
                "summary": "Create a new class category",
                "parameters": [
                    {
                        "description": "ClassCategory payload",
                        "name": "class_category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ClassCategoryDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ClassCategoryDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/class_categories/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetClassCategory retrieves a single ClassCategory by its ID, including Classes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ClassCategories"
                ],
                "summary": "Get class category by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ClassCategory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ClassCategoryDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "ClassCategory not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "UpdateClassCategory updates a ClassCategory record by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ClassCategories"
                ],
                "summary": "Update an existing class category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ClassCategory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated payload",
                        "name": "class_category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ClassCategoryDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ClassCategoryDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "ClassCategory not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "DeleteClassCategory removes a ClassCategory record by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ClassCategories"
                ],
                "summary": "Delete a class category by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ClassCategory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted class category",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "ClassCategory not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/class_sessions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetClassSessions retrieves all ClassSession records with Class relation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ClassSessions"
                ],
                "summary": "List all class sessions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ClassSessionDoc"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "CreateClassSession creates a new ClassSession record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ClassSessions"
                ],
                "summary": "Create a new class session",
                "parameters": [
                    {
                        "description": "CreateClassSessionRequest payload",
                        "name": "create_class_session_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateClassSessionRequestDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ClassSessionDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/class_sessions/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetClassSession retrieves a single ClassSession by its ID, including Class",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ClassSessions"
                ],
                "summary": "Get class session by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ClassSession ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ClassSessionDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "ClassSession not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "UpdateClassSession updates a ClassSession record by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ClassSessions"
                ],
                "summary": "Update an existing class session",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ClassSession ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated ClassSession payload",
                        "name": "class_session",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ClassSessionDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ClassSessionDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "ClassSession not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "DeleteClassSession removes a ClassSession record by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ClassSessions"
                ],
                "summary": "Delete a class session by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ClassSession ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted class session",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "ClassSession not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/classes": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of classes filtered by optional query parameters: categories, and rating range",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Classes"
                ],
                "summary": "List all classes",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by one or more categories (OR relation)",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Minimum class rating",
                        "name": "min_rating",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum class rating",
                        "name": "max_rating",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort key popular",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ClassDoc"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "CreateClass creates a new Class record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Classes"
                ],
                "summary": "Create a new class",
                "parameters": [
                    {
                        "description": "Class payload",
                        "name": "class",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ClassDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ClassDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/classes/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetClass retrieves a single Class by its ID, including Teacher and Categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Classes"
                ],
                "summary": "Get class by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Class ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ClassDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Class not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "UpdateClass updates a Class record by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Classes"
                ],
                "summary": "Update an existing class",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Class ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated class payload",
                        "name": "class",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ClassDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ClassDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Class not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "DeleteClass removes a Class record by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Classes"
                ],
                "summary": "Delete a class by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Class ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted class",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Class not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/classes/{id}/average_rating": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetClassAverageRating calculates and returns the average rating for a class by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Classes"
                ],
                "summary": "Get average rating of a class",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Class ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ClassAverageRating"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/enrollments": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetEnrollments retrieves all Enrollment records with associated Learner and Class",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrollments"
                ],
                "summary": "List all enrollments",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.EnrollmentDoc"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "CreateEnrollment creates a new Enrollment record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrollments"
                ],
                "summary": "Create a new enrollment",
                "parameters": [
                    {
                        "description": "Enrollment payload",
                        "name": "enrollment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EnrollmentDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.EnrollmentDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/enrollments/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetEnrollment retrieves a single Enrollment by its ID, including related Learner and Class",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrollments"
                ],
                "summary": "Get enrollment by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Enrollment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EnrollmentDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Enrollment not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "UpdateEnrollment updates an Enrollment record by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrollments"
                ],
                "summary": "Update an existing enrollment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Enrollment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated enrollment payload",
                        "name": "enrollment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EnrollmentDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EnrollmentDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Enrollment not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "DeleteEnrollment removes an Enrollment record by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrollments"
                ],
                "summary": "Delete an enrollment by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Enrollment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted enrollment",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Enrollment not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Simple health check for payment service.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/learners": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetLearners retrieves all Learner records",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Learners"
                ],
                "summary": "List all learners",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LearnerDoc"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "CreateLearner creates a new Learner record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Learners"
                ],
                "summary": "Create a new learner",
                "parameters": [
                    {
                        "description": "Learner payload",
                        "name": "learner",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LearnerDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.LearnerDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/learners/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetLearner retrieves a single Learner by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Learners"
                ],
                "summary": "Get learner by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Learner ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.LearnerDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Learner not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "DeleteLearner removes a Learner record by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Learners"
                ],
                "summary": "Delete a learner by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Learner ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted Learner",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Learner not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate a nisit user via KU API, create the user if not exists, and return a JWT token along with user info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "Login with KU/Nisit credentials",
                "parameters": [
                    {
                        "description": "Login payload",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequestDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponseDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/meetings/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the meeting link associated with a given ClassSession ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Meetings"
                ],
                "summary": "Get meeting link by ClassSession ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ClassSession ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "meeting_link",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid class session ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Class session not found or meeting not created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/notifications": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetNotifications retrieves all Notification records with associated User",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "List all notifications",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NotificationDoc"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "CreateNotification creates a new Notification record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Create a new notification",
                "parameters": [
                    {
                        "description": "Notification payload",
                        "name": "notification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NotificationDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.NotificationDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/notifications/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetNotification retrieves a single Notification by its ID, including the User",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get notification by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Notification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.NotificationDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Notification not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "UpdateNotification updates a Notification record by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Update an existing notification",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Notification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated notification payload",
                        "name": "notification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NotificationDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.NotificationDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Notification not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "DeleteNotification removes a Notification record by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Delete a notification by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Notification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted notification",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Notification not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/payments/charge": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create an Omise charge. For credit cards, prefer using a token. For testing, server-side tokenization via card fields is supported.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Create a payment charge",
                "parameters": [
                    {
                        "description": "Payment payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Omise charge response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/payments/transactions": {
            "get": {
                "description": "List transactions with optional filters and pagination.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "List transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by user ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (e.g. successful, failed)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by channel (e.g. card, promptpay)",
                        "name": "channel",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (default 50)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset (default 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TransactionListResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/payments/transactions/{id}": {
            "get": {
                "description": "Get a transaction by internal ID or Omise charge_id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Get a transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID or charge_id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    },
                    "400": {
                        "description": "Invalid transaction ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/payments/transactions/{id}/refund": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Refund an Omise charge by transaction ID or charge_id. Partial refund if amount provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Refund a transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID or charge_id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Refund payload, e.g. {\\",
                        "name": "payload",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Transaction not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reports": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetReports retrieves all Report records with Reporter and Reported relations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "List all reports",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ReportDoc"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "CreateReport creates a new Report record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Create a new report",
                "parameters": [
                    {
                        "description": "Report payload",
                        "name": "report",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReportDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ReportDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reports/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetReport retrieves a single Report by its ID, including Reporter and Reported",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get report by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ReportDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Report not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "UpdateReport updates a Report record by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Update an existing report",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated report payload",
                        "name": "report",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReportDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ReportDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Report not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "DeleteReport removes a Report record by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Delete a report by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted Report",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Report not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reviews": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetReviews retrieves all Review records with related Learner and Class",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reviews"
                ],
                "summary": "List all reviews",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ReviewDoc"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "CreateReview creates a new Review record with rating validation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reviews"
                ],
                "summary": "Create a new review",
                "parameters": [
                    {
                        "description": "Review payload",
                        "name": "review",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReviewDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ReviewDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input or rating out of range",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reviews/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetReview retrieves a single Review by its ID, including related Learner and Class",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reviews"
                ],
                "summary": "Get review by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ReviewDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Review not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "UpdateReview updates a Review record by its ID; only Rating and Comment fields",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reviews"
                ],
                "summary": "Update an existing review",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated review payload",
                        "name": "review",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReviewDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ReviewDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input or rating out of range",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Review not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "DeleteReview removes a Review record by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reviews"
                ],
                "summary": "Delete a review by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted review",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Review not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/teachers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetTeachers retrieves all Teacher records",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Teachers"
                ],
                "summary": "List all teachers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TeacherDoc"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "CreateTeacher creates a new Teacher record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Teachers"
                ],
                "summary": "Create a new teacher",
                "parameters": [
                    {
                        "description": "Teacher payload",
                        "name": "teacher",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TeacherDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.TeacherDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/teachers/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetTeacher retrieves a single Teacher by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Teachers"
                ],
                "summary": "Get teacher by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Teacher ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TeacherDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Teacher not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "UpdateTeacher updates a Teacher record by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Teachers"
                ],
                "summary": "Update an existing teacher",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Teacher ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated teacher payload",
                        "name": "teacher",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TeacherDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TeacherDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Teacher not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "DeleteTeacher removes a Teacher record by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Teachers"
                ],
                "summary": "Delete a teacher by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Teacher ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted Teacher",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Teacher not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/teachers/{id}/average_rating": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetTeacherAverageRating calculates and returns the average rating across all classes taught by a teacher.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Teachers"
                ],
                "summary": "Get average rating of a teacher",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Teacher ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TeacherAverageRating"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetUsers retrieves all user records",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "List all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserDoc"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "CreateUser creates a new user record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User payload",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.UserDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "GetUser retrieves a single user by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "UpdateUser updates a user record by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update an existing user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user payload",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "DeleteUser removes a user record by its ID along with associated Learner, Teacher, and Admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted User and associated roles",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/webhooks/omise": {
            "post": {
                "description": "Handles Omise events by verifying and upserting transaction status. Accepts either an Event payload (object:\"event\") or a Charge payload (object:\"charge\").",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Omise webhook",
                "parameters": [
                    {
                        "description": "Omise webhook payload (event or charge object)",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.OmiseWebhookPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Processed charge information",
                        "schema": {
                            "$ref": "#/definitions/handlers.OmiseWebhookResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Retryable server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.OmiseWebhookPayload": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "chrg_test_658q8luocil7hlhd07n"
                },
                "object": {
                    "description": "\"event\" or \"charge\"",
                    "type": "string",
                    "example": "charge"
                }
            }
        },
        "handlers.OmiseWebhookResponse": {
            "type": "object",
            "properties": {
                "charge_id": {
                    "type": "string"
                },
                "paid": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.AdminDoc": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "models.BanDetailsLearnerDoc": {
            "type": "object",
            "properties": {
                "ban_description": {
                    "type": "string",
                    "example": "Spamming inappropriate content"
                },
                "ban_end": {
                    "type": "string",
                    "example": "2025-08-30T12:00:00Z"
                },
                "ban_start": {
                    "type": "string",
                    "example": "2025-08-20T12:00:00Z"
                },
                "learner_id": {
                    "type": "integer",
                    "example": 42
                }
            }
        },
        "models.BanDetailsTeacherDoc": {
            "type": "object",
            "properties": {
                "ban_description": {
                    "type": "string",
                    "example": "Repeated policy violations"
                },
                "ban_end": {
                    "type": "string",
                    "example": "2025-08-30T12:00:00Z"
                },
                "ban_start": {
                    "type": "string",
                    "example": "2025-08-20T12:00:00Z"
                },
                "teacher_id": {
                    "type": "integer",
                    "example": 7
                }
            }
        },
        "models.ClassAverageRating": {
            "type": "object",
            "properties": {
                "average_rating": {
                    "type": "number",
                    "example": 4.5
                },
                "class_id": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "models.ClassCategoryDoc": {
            "type": "object",
            "properties": {
                "class_category": {
                    "type": "string",
                    "example": "Mathematics"
                },
                "classes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ClassDoc"
                    }
                }
            }
        },
        "models.ClassDoc": {
            "type": "object",
            "properties": {
                "banner_picture": {
                    "type": "string",
                    "example": "\u003cbase64-encoded-image\u003e"
                },
                "class_description": {
                    "type": "string",
                    "example": "Advanced Python programming course"
                },
                "class_name": {
                    "type": "string",
                    "example": "Advanced Python Programming"
                },
                "teacher_id": {
                    "type": "integer",
                    "example": 7
                }
            }
        },
        "models.ClassSessionDoc": {
            "type": "object",
            "properties": {
                "class_finish": {
                    "type": "string",
                    "example": "2025-09-05T16:00:00Z"
                },
                "class_id": {
                    "type": "integer",
                    "example": 12
                },
                "class_start": {
                    "type": "string",
                    "example": "2025-09-05T14:00:00Z"
                },
                "class_status": {
                    "type": "string",
                    "example": "Scheduled"
                },
                "class_url": {
                    "type": "string",
                    "example": "https://meet.jit.si/KUtutorium_12_1758630058"
                },
                "description": {
                    "type": "string",
                    "example": "Weekly tutoring session for calculus"
                },
                "enrollment_deadline": {
                    "type": "string",
                    "example": "2025-09-01T23:59:59Z"
                },
                "learner_limit": {
                    "type": "integer",
                    "example": 50
                },
                "price": {
                    "type": "number",
                    "example": 199.99
                }
            }
        },
        "models.CreateClassSessionRequestDoc": {
            "type": "object",
            "properties": {
                "class_finish": {
                    "type": "string",
                    "example": "2025-09-05T16:00:00Z"
                },
                "class_id": {
                    "type": "integer",
                    "example": 12
                },
                "class_start": {
                    "type": "string",
                    "example": "2025-09-05T14:00:00Z"
                },
                "class_status": {
                    "type": "string",
                    "example": "Scheduled"
                },
                "description": {
                    "type": "string",
                    "example": "Weekly tutoring session for calculus"
                },
                "enrollment_deadline": {
                    "type": "string",
                    "example": "2025-09-01T23:59:59Z"
                },
                "learner_limit": {
                    "type": "integer",
                    "example": 5
                },
                "price": {
                    "type": "number",
                    "example": 1999.99
                }
            }
        },
        "models.EnrollmentDoc": {
            "type": "object",
            "properties": {
                "class_session_id": {
                    "type": "integer",
                    "example": 3
                },
                "enrollment_status": {
                    "type": "string",
                    "example": "active"
                },
                "learner_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.LearnerDoc": {
            "type": "object",
            "properties": {
                "flag_count": {
                    "type": "integer",
                    "example": 1
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.LoginRequestDoc": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string",
                    "example": "Alice"
                },
                "gender": {
                    "type": "string",
                    "example": "Female"
                },
                "last_name": {
                    "type": "string",
                    "example": "Smith"
                },
                "password": {
                    "type": "string",
                    "example": "mySecretPassword"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+66912345678"
                },
                "profile_picture": {
                    "type": "string",
                    "example": "\u003cbase64-encoded-image\u003e"
                },
                "username": {
                    "type": "string",
                    "example": "b6610505511"
                }
            }
        },
        "models.LoginResponseDoc": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                    "$ref": "#/definitions/models.UserDoc"
                }
            }
        },
        "models.NotificationDoc": {
            "type": "object",
            "properties": {
                "notification_date": {
                    "type": "string",
                    "example": "2025-08-20T15:04:05Z"
                },
                "notification_description": {
                    "type": "string",
                    "example": "Your class has been rescheduled"
                },
                "notification_type": {
                    "type": "string",
                    "example": "System Alert"
                },
                "read_flag": {
                    "type": "boolean",
                    "example": false
                },
                "user_id": {
                    "type": "integer",
                    "example": 42
                }
            }
        },
        "models.PaymentRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "(satang unit : 100 satang = 1 THB)",
                    "type": "integer"
                },
                "bank": {
                    "description": "e.g. \"bbl\", \"bay\", \"scb\"",
                    "type": "string"
                },
                "card": {
                    "description": "server-side tokenization (TESTING ONLY)",
                    "type": "object",
                    "additionalProperties": true
                },
                "currency": {
                    "description": "\"THB\"",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "metadata": {
                    "description": "free-form, attached to the Omise charge",
                    "type": "object",
                    "additionalProperties": true
                },
                "paymentType": {
                    "description": "\"credit_card\" | \"promptpay\" | \"internet_banking\"",
                    "type": "string"
                },
                "return_uri": {
                    "description": "required for some redirects (3DS/internet banking)",
                    "type": "string"
                },
                "token": {
                    "description": "for card charges (preferred)",
                    "type": "string"
                },
                "user_id": {
                    "description": "FK to users.id",
                    "type": "integer"
                }
            }
        },
        "models.ReportDoc": {
            "type": "object",
            "properties": {
                "class_session_id": {
                    "type": "integer",
                    "example": 20
                },
                "report_date": {
                    "type": "string",
                    "example": "2025-08-20T14:30:00Z"
                },
                "report_description": {
                    "type": "string",
                    "example": "User sent inappropriate messages"
                },
                "report_picture": {
                    "type": "string",
                    "example": "\u003cbase64-encoded-image\u003e"
                },
                "report_reason": {
                    "type": "string",
                    "example": "teacher_absent"
                },
                "report_result": {
                    "type": "string",
                    "example": "Report approved"
                },
                "report_status": {
                    "type": "string",
                    "example": "pending"
                },
                "report_type": {
                    "type": "string",
                    "example": "Abuse"
                },
                "report_user_id": {
                    "type": "integer",
                    "example": 5
                },
                "reported_user_id": {
                    "type": "integer",
                    "example": 8
                }
            }
        },
        "models.ReviewDoc": {
            "type": "object",
            "properties": {
                "class_id": {
                    "type": "integer",
                    "example": 9
                },
                "comment": {
                    "type": "string",
                    "example": "This class was very informative and well-structured."
                },
                "learner_id": {
                    "type": "integer",
                    "example": 42
                },
                "rating": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "models.TeacherAverageRating": {
            "type": "object",
            "properties": {
                "average_rating": {
                    "type": "number",
                    "example": 4.5
                },
                "teacher_id": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "models.TeacherDoc": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Experienced Mathematics teacher specializing in calculus and linear algebra."
                },
                "email": {
                    "type": "string",
                    "example": "teacher@example.com"
                },
                "flag_count": {
                    "type": "integer",
                    "example": 3
                },
                "user_id": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "models.Transaction": {
            "type": "object",
            "properties": {
                "amount_satang": {
                    "type": "integer"
                },
                "channel": {
                    "type": "string"
                },
                "charge_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "failure_code": {
                    "type": "string"
                },
                "failure_message": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "meta": {
                    "type": "object"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.TransactionListResponse": {
            "type": "object",
            "properties": {
                "pagination": {
                    "type": "object",
                    "properties": {
                        "limit": {
                            "type": "integer"
                        },
                        "offset": {
                            "type": "integer"
                        },
                        "total": {
                            "type": "integer"
                        }
                    }
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Transaction"
                    }
                }
            }
        },
        "models.UserDoc": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number",
                    "example": 250.75
                },
                "ban_count": {
                    "type": "integer",
                    "example": 1
                },
                "first_name": {
                    "type": "string",
                    "example": "Alice"
                },
                "gender": {
                    "type": "string",
                    "example": "Female"
                },
                "last_name": {
                    "type": "string",
                    "example": "Smith"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+66912345678"
                },
                "profile_picture": {
                    "type": "string",
                    "example": "\u003cbase64-encoded-image\u003e"
                },
                "student_id": {
                    "type": "string",
                    "example": "6610505511"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer \" followed by your JWT token.`",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}