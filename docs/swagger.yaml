definitions:
  datatypes.JSONMap:
    additionalProperties: true
    type: object
  github_com_a2n2k3p4_tutorium-backend_models.PaymentRequest:
    properties:
      amount:
        description: '(satang unit : 100 satang = 1 THB)'
        type: integer
      bank:
        description: e.g. "bbl", "bay", "scb"
        type: string
      card:
        additionalProperties: true
        description: server-side tokenization (TESTING ONLY)
        type: object
      currency:
        description: '"THB"'
        type: string
      description:
        type: string
      metadata:
        additionalProperties: true
        description: free-form, attached to the Omise charge
        type: object
      paymentType:
        description: '"credit_card" | "promptpay" | "internet_banking"'
        type: string
      return_uri:
        description: required for some redirects (3DS/internet banking)
        type: string
      token:
        description: for card charges (preferred)
        type: string
      user_id:
        description: FK to users.id
        type: integer
    type: object
  github_com_a2n2k3p4_tutorium-backend_models.Transaction:
    properties:
      amount_satang:
        type: integer
      channel:
        type: string
      charge_id:
        type: string
      created_at:
        type: string
      currency:
        type: string
      failure_code:
        type: string
      failure_message:
        type: string
      id:
        type: integer
      meta:
        $ref: '#/definitions/datatypes.JSONMap'
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  github_com_a2n2k3p4_tutorium-backend_models.UserDoc:
    properties:
      balance:
        example: 250.75
        type: number
      ban_count:
        example: 1
        type: integer
      first_name:
        example: Alice
        type: string
      gender:
        example: Female
        type: string
      id:
        example: 101
        type: integer
      last_name:
        example: Smith
        type: string
      phone_number:
        example: "+66912345678"
        type: string
      profile_picture:
        example: <base64-encoded-image>
        type: string
      student_id:
        example: "6610505511"
        type: string
    type: object
  models.AdminDoc:
    properties:
      id:
        example: 43
        type: integer
      user_id:
        example: 5
        type: integer
    type: object
  models.BanDetailsLearnerDoc:
    properties:
      ban_description:
        example: Spamming inappropriate content
        type: string
      ban_end:
        example: "2025-08-30T12:00:00Z"
        type: string
      ban_start:
        example: "2025-08-20T12:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      learner_id:
        example: 42
        type: integer
    type: object
  models.BanDetailsTeacherDoc:
    properties:
      ban_description:
        example: Repeated policy violations
        type: string
      ban_end:
        example: "2025-08-30T12:00:00Z"
        type: string
      ban_start:
        example: "2025-08-20T12:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      teacher_id:
        example: 7
        type: integer
    type: object
  models.ClassCategoryDoc:
    properties:
      class_category:
        example: Mathematics
        type: string
      classes:
        items:
          $ref: '#/definitions/models.ClassDoc'
        type: array
      id:
        example: 3
        type: integer
    type: object
  models.ClassDoc:
    properties:
      banner_picture:
        example: <base64-encoded-image>
        type: string
      class_description:
        example: Advanced Python programming course
        type: string
      class_name:
        example: Advanced Python Programming
        type: string
      id:
        example: 21
        type: integer
      price:
        example: 1999.99
        type: number
      rating:
        example: 4.7
        type: number
      teacher_id:
        example: 7
        type: integer
    type: object
  models.ClassSessionDoc:
    properties:
      class_finish:
        example: "2025-09-05T16:00:00Z"
        type: string
      class_id:
        example: 12
        type: integer
      class_start:
        example: "2025-09-05T14:00:00Z"
        type: string
      class_status:
        example: Scheduled
        type: string
      description:
        example: Weekly tutoring session for calculus
        type: string
      enrollment_deadline:
        example: "2025-09-01T23:59:59Z"
        type: string
      id:
        example: 15
        type: integer
      learner_limit:
        example: 50
        type: integer
    type: object
  models.EnrollmentDoc:
    properties:
      class_session_id:
        example: 21
        type: integer
      enrollment_status:
        example: active
        type: string
      id:
        example: 101
        type: integer
      learner_id:
        example: 42
        type: integer
    type: object
  models.LearnerDoc:
    properties:
      flag_count:
        example: 3
        type: integer
      id:
        example: 42
        type: integer
      user_id:
        example: 5
        type: integer
    type: object
  models.LoginRequestDoc:
    properties:
      first_name:
        example: Alice
        type: string
      gender:
        example: Female
        type: string
      last_name:
        example: Smith
        type: string
      password:
        example: mySecretPassword
        type: string
      phone_number:
        example: "+66912345678"
        type: string
      profile_picture:
        example: <base64-encoded-image>
        type: string
      username:
        example: b6610505511
        type: string
    type: object
  models.LoginResponseDoc:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/github_com_a2n2k3p4_tutorium-backend_models.UserDoc'
    type: object
  models.NotificationDoc:
    properties:
      id:
        example: 100
        type: integer
      notification_date:
        example: "2025-08-20T15:04:05Z"
        type: string
      notification_description:
        example: Your class has been rescheduled
        type: string
      notification_type:
        example: System Alert
        type: string
      read_flag:
        example: false
        type: boolean
      user_id:
        example: 42
        type: integer
    type: object
  models.ReportDoc:
    properties:
      id:
        example: 12
        type: integer
      report_date:
        example: "2025-08-20T14:30:00Z"
        type: string
      report_description:
        example: User sent inappropriate messages
        type: string
      report_picture:
        example: <base64-encoded-image>
        type: string
      report_type:
        example: Abuse
        type: string
      report_user_id:
        example: 5
        type: integer
      reported_user_id:
        example: 8
        type: integer
    type: object
  models.ReviewDoc:
    properties:
      class_id:
        example: 9
        type: integer
      comment:
        example: This class was very informative and well-structured.
        type: string
      id:
        example: 101
        type: integer
      learner_id:
        example: 42
        type: integer
      rating:
        example: 5
        type: integer
    type: object
  models.TeacherDoc:
    properties:
      description:
        example: Experienced Mathematics teacher specializing in calculus and linear
          algebra.
        type: string
      email:
        example: teacher@example.com
        type: string
      flag_count:
        example: 3
        type: integer
      id:
        example: 12
        type: integer
      user_id:
        example: 5
        type: integer
    type: object
  models.TransactionListResponse:
    properties:
      pagination:
        properties:
          limit:
            type: integer
          offset:
            type: integer
          total:
            type: integer
        type: object
      transactions:
        items:
          $ref: '#/definitions/github_com_a2n2k3p4_tutorium-backend_models.Transaction'
        type: array
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the API for Tutorium Backend system.
  license:
    name: AGPL-3.0
    url: https://www.gnu.org/licenses/agpl-3.0.en.
  termsOfService: http://swagger.io/terms/
  title: Tutorium Backend API
  version: "1.0"
paths:
  /admins:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all admins
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdminDoc'
            type: array
        "404":
          description: Admins not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all admins
      tags:
      - admins
    post:
      consumes:
      - application/json
      description: Create a new admin with the provided data
      parameters:
      - description: Admin data
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.AdminDoc'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AdminDoc'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new admin
      tags:
      - admins
  /admins/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific admin by their ID
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted admin
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - Invalid ID or admin not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error during deletion
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete admin by ID
      tags:
      - admins
    get:
      consumes:
      - application/json
      description: Retrieve a specific admin by their ID
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AdminDoc'
        "400":
          description: Bad request - Invalid ID or admin not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get admin by ID
      tags:
      - admins
  /banlearners:
    get:
      description: GetBanLearners returns a list of all ban records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BanDetailsLearnerDoc'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all banned learners
      tags:
      - BanLearners
    post:
      consumes:
      - application/json
      description: CreateBanLearner creates a new ban record for a learner
      parameters:
      - description: Ban Learner Payload
        in: body
        name: banlearner
        required: true
        schema:
          $ref: '#/definitions/models.BanDetailsLearnerDoc'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.BanDetailsLearnerDoc'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new banned learner record
      tags:
      - BanLearners
  /banlearners/{id}:
    delete:
      description: DeleteBanLearner deletes a ban record by ID
      parameters:
      - description: Ban Learner ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted ban learner
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a banned learner record
      tags:
      - BanLearners
    get:
      description: GetBanLearner returns a single ban record by ID
      parameters:
      - description: Ban Learner ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BanDetailsLearnerDoc'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a banned learner by ID
      tags:
      - BanLearners
    put:
      consumes:
      - application/json
      description: UpdateBanLearner modifies an existing ban record
      parameters:
      - description: Ban Learner ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated ban record
        in: body
        name: banlearner
        required: true
        schema:
          $ref: '#/definitions/models.BanDetailsLearnerDoc'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BanDetailsLearnerDoc'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a banned learner record
      tags:
      - BanLearners
  /banteachers:
    get:
      description: GetBanTeachers retrieves all BanDetailsTeacher entries with associated
        Teacher
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BanDetailsTeacherDoc'
            type: array
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all ban records for teachers
      tags:
      - BanTeachers
    post:
      consumes:
      - application/json
      description: CreateBanTeacher creates a new BanDetailsTeacher entry
      parameters:
      - description: BanTeacher payload
        in: body
        name: banteacher
        required: true
        schema:
          $ref: '#/definitions/models.BanDetailsTeacherDoc'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.BanDetailsTeacherDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new ban record for a teacher
      tags:
      - BanTeachers
  /banteachers/{id}:
    delete:
      description: DeleteBanTeacher removes a BanDetailsTeacher record by its ID
      parameters:
      - description: BanTeacher ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted ban teacher
          schema:
            type: string
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: BanTeacher not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a ban record by ID
      tags:
      - BanTeachers
    get:
      description: GetBanTeacher retrieves a single BanDetailsTeacher by its ID
      parameters:
      - description: BanTeacher ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BanDetailsTeacherDoc'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: BanTeacher not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get ban record by ID
      tags:
      - BanTeachers
    put:
      consumes:
      - application/json
      description: UpdateBanTeacher updates an existing BanDetailsTeacher
      parameters:
      - description: BanTeacher ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated payload
        in: body
        name: banteacher
        required: true
        schema:
          $ref: '#/definitions/models.BanDetailsTeacherDoc'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BanDetailsTeacherDoc'
        "400":
          description: Invalid input or not found
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: BanTeacher not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a ban record by ID
      tags:
      - BanTeachers
  /class_categories:
    get:
      description: GetClassCategories retrieves all ClassCategory records with Classes
        relation
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ClassCategoryDoc'
            type: array
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all class categories
      tags:
      - ClassCategories
    post:
      consumes:
      - application/json
      description: CreateClassCategory creates a new ClassCategory record
      parameters:
      - description: ClassCategory payload
        in: body
        name: class_category
        required: true
        schema:
          $ref: '#/definitions/models.ClassCategoryDoc'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ClassCategoryDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new class category
      tags:
      - ClassCategories
  /class_categories/{id}:
    delete:
      description: DeleteClassCategory removes a ClassCategory record by its ID
      parameters:
      - description: ClassCategory ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted class category
          schema:
            type: string
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: ClassCategory not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a class category by ID
      tags:
      - ClassCategories
    get:
      description: GetClassCategory retrieves a single ClassCategory by its ID, including
        Classes
      parameters:
      - description: ClassCategory ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClassCategoryDoc'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: ClassCategory not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get class category by ID
      tags:
      - ClassCategories
    put:
      consumes:
      - application/json
      description: UpdateClassCategory updates a ClassCategory record by its ID
      parameters:
      - description: ClassCategory ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated payload
        in: body
        name: class_category
        required: true
        schema:
          $ref: '#/definitions/models.ClassCategoryDoc'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClassCategoryDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: ClassCategory not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update an existing class category
      tags:
      - ClassCategories
  /class_sessions:
    get:
      description: GetClassSessions retrieves all ClassSession records with Class
        relation
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ClassSessionDoc'
            type: array
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all class sessions
      tags:
      - ClassSessions
    post:
      consumes:
      - application/json
      description: CreateClassSession creates a new ClassSession record
      parameters:
      - description: ClassSession payload
        in: body
        name: class_session
        required: true
        schema:
          $ref: '#/definitions/models.ClassSessionDoc'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ClassSessionDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new class session
      tags:
      - ClassSessions
  /class_sessions/{id}:
    delete:
      description: DeleteClassSession removes a ClassSession record by its ID
      parameters:
      - description: ClassSession ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted class session
          schema:
            type: string
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: ClassSession not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a class session by ID
      tags:
      - ClassSessions
    get:
      description: GetClassSession retrieves a single ClassSession by its ID, including
        Class
      parameters:
      - description: ClassSession ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClassSessionDoc'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: ClassSession not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get class session by ID
      tags:
      - ClassSessions
    put:
      consumes:
      - application/json
      description: UpdateClassSession updates a ClassSession record by its ID
      parameters:
      - description: ClassSession ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated ClassSession payload
        in: body
        name: class_session
        required: true
        schema:
          $ref: '#/definitions/models.ClassSessionDoc'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClassSessionDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: ClassSession not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update an existing class session
      tags:
      - ClassSessions
  /classes:
    get:
      description: 'Retrieve a list of classes filtered by optional query parameters:
        categories, price range, and rating range'
      parameters:
      - collectionFormat: csv
        description: Filter by one or more categories (OR relation)
        in: query
        items:
          type: string
        name: category
        type: array
      - description: Minimum class price
        in: query
        name: min_price
        type: string
      - description: Maximum class price
        in: query
        name: max_price
        type: string
      - description: Minimum class rating
        in: query
        name: min_rating
        type: string
      - description: Maximum class rating
        in: query
        name: max_rating
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ClassDoc'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all classes
      tags:
      - Classes
    post:
      consumes:
      - application/json
      description: CreateClass creates a new Class record
      parameters:
      - description: Class payload
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/models.ClassDoc'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ClassDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new class
      tags:
      - Classes
  /classes/{id}:
    delete:
      description: DeleteClass removes a Class record by its ID
      parameters:
      - description: Class ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted class
          schema:
            type: string
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Class not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a class by ID
      tags:
      - Classes
    get:
      description: GetClass retrieves a single Class by its ID, including Teacher
        and Categories
      parameters:
      - description: Class ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClassDoc'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Class not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get class by ID
      tags:
      - Classes
    put:
      consumes:
      - application/json
      description: UpdateClass updates a Class record by its ID
      parameters:
      - description: Class ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated class payload
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/models.ClassDoc'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClassDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Class not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update an existing class
      tags:
      - Classes
  /enrollments:
    get:
      description: GetEnrollments retrieves all Enrollment records with associated
        Learner and Class
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EnrollmentDoc'
            type: array
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all enrollments
      tags:
      - Enrollments
    post:
      consumes:
      - application/json
      description: CreateEnrollment creates a new Enrollment record
      parameters:
      - description: Enrollment payload
        in: body
        name: enrollment
        required: true
        schema:
          $ref: '#/definitions/models.EnrollmentDoc'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.EnrollmentDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new enrollment
      tags:
      - Enrollments
  /enrollments/{id}:
    delete:
      description: DeleteEnrollment removes an Enrollment record by its ID
      parameters:
      - description: Enrollment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted enrollment
          schema:
            type: string
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Enrollment not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete an enrollment by ID
      tags:
      - Enrollments
    get:
      description: GetEnrollment retrieves a single Enrollment by its ID, including
        related Learner and Class
      parameters:
      - description: Enrollment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EnrollmentDoc'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Enrollment not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get enrollment by ID
      tags:
      - Enrollments
    put:
      consumes:
      - application/json
      description: UpdateEnrollment updates an Enrollment record by its ID
      parameters:
      - description: Enrollment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated enrollment payload
        in: body
        name: enrollment
        required: true
        schema:
          $ref: '#/definitions/models.EnrollmentDoc'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EnrollmentDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Enrollment not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update an existing enrollment
      tags:
      - Enrollments
  /health:
    get:
      description: Simple health check for payment service.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check
      tags:
      - Payments
  /learners:
    get:
      description: GetLearners retrieves all Learner records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LearnerDoc'
            type: array
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all learners
      tags:
      - Learners
    post:
      consumes:
      - application/json
      description: CreateLearner creates a new Learner record
      parameters:
      - description: Learner payload
        in: body
        name: learner
        required: true
        schema:
          $ref: '#/definitions/models.LearnerDoc'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.LearnerDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new learner
      tags:
      - Learners
  /learners/{id}:
    delete:
      description: DeleteLearner removes a Learner record by its ID
      parameters:
      - description: Learner ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted Learner
          schema:
            type: string
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Learner not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a learner by ID
      tags:
      - Learners
    get:
      description: GetLearner retrieves a single Learner by its ID
      parameters:
      - description: Learner ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LearnerDoc'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Learner not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get learner by ID
      tags:
      - Learners
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a nisit user via KU API, create the user if not exists,
        and return a JWT token along with user info
      parameters:
      - description: Login payload
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequestDoc'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponseDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login with KU/Nisit credentials
      tags:
      - Login
  /notifications:
    get:
      description: GetNotifications retrieves all Notification records with associated
        User
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NotificationDoc'
            type: array
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all notifications
      tags:
      - Notifications
    post:
      consumes:
      - application/json
      description: CreateNotification creates a new Notification record
      parameters:
      - description: Notification payload
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/models.NotificationDoc'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.NotificationDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new notification
      tags:
      - Notifications
  /notifications/{id}:
    delete:
      description: DeleteNotification removes a Notification record by its ID
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted notification
          schema:
            type: string
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Notification not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a notification by ID
      tags:
      - Notifications
    get:
      description: GetNotification retrieves a single Notification by its ID, including
        the User
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NotificationDoc'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Notification not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get notification by ID
      tags:
      - Notifications
    put:
      consumes:
      - application/json
      description: UpdateNotification updates a Notification record by its ID
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated notification payload
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/models.NotificationDoc'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NotificationDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Notification not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update an existing notification
      tags:
      - Notifications
  /payments/charge:
    post:
      consumes:
      - application/json
      description: Create an Omise charge. For credit cards, prefer using a token.
        For testing, server-side tokenization via card fields is supported.
      parameters:
      - description: Payment payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/github_com_a2n2k3p4_tutorium-backend_models.PaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Omise charge response
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a payment charge
      tags:
      - Payments
  /payments/transactions:
    get:
      description: List transactions with optional filters and pagination.
      parameters:
      - description: Filter by user ID
        in: query
        name: user_id
        type: string
      - description: Filter by status (e.g. successful, failed)
        in: query
        name: status
        type: string
      - description: Filter by channel (e.g. card, promptpay)
        in: query
        name: channel
        type: string
      - description: Limit (default 50)
        in: query
        name: limit
        type: integer
      - description: Offset (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TransactionListResponse'
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List transactions
      tags:
      - Payments
  /payments/transactions/{id}:
    get:
      description: Get a transaction by internal ID or Omise charge_id.
      parameters:
      - description: Transaction ID or charge_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_a2n2k3p4_tutorium-backend_models.Transaction'
        "404":
          description: Not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a transaction
      tags:
      - Payments
  /payments/transactions/{id}/refund:
    post:
      consumes:
      - application/json
      description: Refund an Omise charge by transaction ID or charge_id. Partial
        refund if amount provided.
      parameters:
      - description: Transaction ID or charge_id
        in: path
        name: id
        required: true
        type: string
      - description: Refund payload, e.g. {\
        in: body
        name: payload
        schema:
          additionalProperties:
            type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Refund a transaction
      tags:
      - Payments
  /reports:
    get:
      description: GetReports retrieves all Report records with Reporter and Reported
        relations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ReportDoc'
            type: array
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all reports
      tags:
      - Reports
    post:
      consumes:
      - application/json
      description: CreateReport creates a new Report record
      parameters:
      - description: Report payload
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/models.ReportDoc'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ReportDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new report
      tags:
      - Reports
  /reports/{id}:
    delete:
      description: DeleteReport removes a Report record by its ID
      parameters:
      - description: Report ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted Report
          schema:
            type: string
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Report not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a report by ID
      tags:
      - Reports
    get:
      description: GetReport retrieves a single Report by its ID, including Reporter
        and Reported
      parameters:
      - description: Report ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReportDoc'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Report not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get report by ID
      tags:
      - Reports
    put:
      consumes:
      - application/json
      description: UpdateReport updates a Report record by its ID
      parameters:
      - description: Report ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated report payload
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/models.ReportDoc'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReportDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Report not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update an existing report
      tags:
      - Reports
  /reviews:
    get:
      description: GetReviews retrieves all Review records with related Learner and
        Class
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ReviewDoc'
            type: array
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all reviews
      tags:
      - Reviews
    post:
      consumes:
      - application/json
      description: CreateReview creates a new Review record with rating validation
      parameters:
      - description: Review payload
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/models.ReviewDoc'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ReviewDoc'
        "400":
          description: Invalid input or rating out of range
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new review
      tags:
      - Reviews
  /reviews/{id}:
    delete:
      description: DeleteReview removes a Review record by its ID
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted review
          schema:
            type: string
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Review not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a review by ID
      tags:
      - Reviews
    get:
      description: GetReview retrieves a single Review by its ID, including related
        Learner and Class
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReviewDoc'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Review not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get review by ID
      tags:
      - Reviews
    put:
      consumes:
      - application/json
      description: UpdateReview updates a Review record by its ID; only Rating and
        Comment fields
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated review payload
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/models.ReviewDoc'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReviewDoc'
        "400":
          description: Invalid input or rating out of range
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Review not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update an existing review
      tags:
      - Reviews
  /teachers:
    get:
      description: GetTeachers retrieves all Teacher records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TeacherDoc'
            type: array
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all teachers
      tags:
      - Teachers
    post:
      consumes:
      - application/json
      description: CreateTeacher creates a new Teacher record
      parameters:
      - description: Teacher payload
        in: body
        name: teacher
        required: true
        schema:
          $ref: '#/definitions/models.TeacherDoc'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TeacherDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new teacher
      tags:
      - Teachers
  /teachers/{id}:
    delete:
      description: DeleteTeacher removes a Teacher record by its ID
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted Teacher
          schema:
            type: string
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Teacher not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a teacher by ID
      tags:
      - Teachers
    get:
      description: GetTeacher retrieves a single Teacher by its ID
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TeacherDoc'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Teacher not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get teacher by ID
      tags:
      - Teachers
    put:
      consumes:
      - application/json
      description: UpdateTeacher updates a Teacher record by its ID
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated teacher payload
        in: body
        name: teacher
        required: true
        schema:
          $ref: '#/definitions/models.TeacherDoc'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TeacherDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Teacher not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update an existing teacher
      tags:
      - Teachers
  /users:
    get:
      description: GetUsers retrieves all user records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_a2n2k3p4_tutorium-backend_models.UserDoc'
            type: array
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: CreateUser creates a new user record
      parameters:
      - description: User payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/github_com_a2n2k3p4_tutorium-backend_models.UserDoc'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_a2n2k3p4_tutorium-backend_models.UserDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      description: DeleteUser removes a user record by its ID along with associated
        Learner, Teacher, and Admin
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted User and associated roles
          schema:
            type: string
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a user by ID
      tags:
      - Users
    get:
      description: GetUser retrieves a single user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_a2n2k3p4_tutorium-backend_models.UserDoc'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: UpdateUser updates a user record by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/github_com_a2n2k3p4_tutorium-backend_models.UserDoc'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_a2n2k3p4_tutorium-backend_models.UserDoc'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update an existing user
      tags:
      - Users
  /webhooks/omise:
    post:
      consumes:
      - application/json
      description: Handles Omise events by verifying and upserting transaction status.
      parameters:
      - description: Omise event payload
        in: body
        name: payload
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Retryable server error
          schema:
            type: string
      summary: Omise webhook
      tags:
      - Payments
securityDefinitions:
  BearerAuth:
    description: Type "Bearer " followed by your JWT token.`
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
